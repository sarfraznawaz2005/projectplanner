{"fileHash":"4ef76a782628e48d5818e7da4f430a8a697a7c8e1dc45a69a548136b328b4a76","mtime":1758618311431,"explanation":"This PHP code file, `PromptService.php`, is designed to help generate various detailed text prompts. Think of it as a specialized \"prompt generator\" that creates specific instructions for an AI or another system, asking it to produce different types of project documentation or diagrams.\n\nLet's break down the code step by step:\n\n---\n\n### **1. PHP Opening Tag (`<?php`)**\n\n```php\n<?php\n```\n\n*   This is the standard way to start any PHP code file. It tells the server that the following content should be interpreted as PHP code.\n\n---\n\n### **2. Namespace (`namespace ProjectPlanner;`)**\n\n```php\nnamespace ProjectPlanner;\n```\n\n*   **What it is:** A namespace is like a folder or a category for your code. It helps organize your classes and functions, especially in larger projects, to prevent naming conflicts.\n*   **In simpler terms:** Imagine you have two different books, both with a chapter titled \"Introduction.\" If they're in different books (namespaces), you know which \"Introduction\" you're talking about. Here, `PromptService` belongs to the `ProjectPlanner` namespace.\n\n---\n\n### **3. Class Definition (`class PromptService`)**\n\n```php\nclass PromptService\n{\n    // ... methods inside ...\n}\n```\n\n*   **What it is:** A `class` is a blueprint for creating \"objects.\" It defines properties (data) and methods (functions) that objects of that class will have.\n*   **In simpler terms:** Think of a class as a cookie cutter. You define the shape once (the class), and then you can use it to create many cookies (objects) that all have the same basic shape and characteristics.\n*   Here, `PromptService` is the name of our class. Its job is to provide services related to building prompts.\n\n---\n\n### **4. Methods (Functions within the Class)**\n\nInside the `PromptService` class, there are several `public function` declarations. These are called \"methods\" when they are part of a class. Each method has a specific purpose: to build a particular type of prompt.\n\nLet's look at each one:\n\n#### **4.1. `buildPRDPrompt` Method**\n\n```php\n    /**\n     * Build PRD generation prompt\n     */\n    public function buildPRDPrompt(string $projectName, string $projectIdea): string\n    {\n        $today = date('Y-m-d');\n\n        return \"Create a comprehensive Project Requirements Document for '{$projectName}'.\n\nApplication Idea: {$projectIdea}\n\nInfer the appropriate project type, technology stack, and scale based on the idea. Consider modern development practices and industry standards.\n\nInclude these sections:\n1. Executive Summary\n2. Project Overview\n3. Goals and Objectives\n4. Target Audience\n5. Functional Requirements\n6. Non-Functional Requirements\n7. User Stories\n8. Technical Requirements\n9. Constraints and Assumptions\n10. Success Metrics\n11. Risk Assessment\n\nProvide specific, actionable content for each section tailored to the project type.\nUse bullet points and clear descriptions.\nFormat in markdown with proper headers.\nToday's date: {$today}\";\n    }\n```\n\n*   **`/** ... */`**: This is a docblock comment. It's used for documenting what the method does, its parameters, and what it returns. It's very helpful for understanding code quickly.\n*   **`public function buildPRDPrompt(...)`**:\n    *   `public`: This keyword means the method can be called from anywhere outside this class.\n    *   `function`: This identifies it as a function (or method in a class).\n    *   `buildPRDPrompt`: This is the name of the method. `PRD` stands for \"Project Requirements Document.\"\n*   **`(string $projectName, string $projectIdea)`**: These are the **parameters** (inputs) the method expects.\n    *   `string`: This is a \"type hint,\" telling PHP that `$projectName` and `$projectIdea` are expected to be text (strings).\n    *   `$projectName`: A variable that will hold the name of the project.\n    *   `$projectIdea`: A variable that will hold the description of the project idea.\n*   **`: string`**: This is a \"return type hint,\" indicating that this method will *always* return a `string` (a piece of text).\n*   **`$today = date('Y-m-d');`**:\n    *   `date()` is a built-in PHP function that gets the current date and time.\n    *   `'Y-m-d'` is a format string that tells `date()` to output the year (four digits), month (two digits), and day (two digits), separated by hyphens (e.g., `2023-10-27`).\n    *   The result is stored in the `$today` variable.\n*   **`return \"...\"`**: This part returns a very long string of text. This text is the actual prompt that would be sent to an AI.\n    *   Notice how `$projectName`, `$projectIdea`, and `$today` are embedded directly into the string using curly braces (`{$variableName}`). This is called **string interpolation**, and it's a convenient way to insert variable values into double-quoted strings in PHP.\n    *   The prompt provides clear instructions to the AI on what a PRD should contain (e.g., \"Executive Summary\", \"Functional Requirements\", \"Target Audience\"), how it should be formatted (markdown), and its purpose.\n\n#### **4.2. `buildSDDPrompt` Method**\n\n```php\n    /**\n     * Build SDD generation prompt\n     */\n    public function buildSDDPrompt(string $projectName, string $prdContent): string\n    {\n        $today = date('Y-m-d');\n\n        return \"Create a detailed System Design Document for '{$projectName}' based on this PRD:\n\n{$prdContent}\n\nDesign the system architecture considering modern best practices, security standards, and scalability needs. Choose appropriate technologies based on the project requirements and scale.\n\nInclude these sections:\n1. System Architecture Overview\n2. Technology Stack\n3. Component Design\n4. Data Model and Database Schema\n5. API Design\n6. Security Considerations\n7. Performance Considerations\n8. Scalability Design\n9. Integration Points\n10. Deployment Architecture\n11. Testing Strategy\n\nProvide technical details for each section with specific recommendations.\nUse bullet points and clear descriptions.\nFormat in markdown with proper headers.\nToday's date: {$today}\nNO MERMAID DIAGRAMS - ONLY TEXT.\";\n    }\n```\n\n*   This method is similar to `buildPRDPrompt`, but it's designed to generate a prompt for a \"System Design Document\" (SDD).\n*   It takes `$projectName` and `prdContent` (the content of the PRD that was presumably generated earlier) as input.\n*   The prompt instructs the AI to design the system based on the provided `prdContent`, including sections like \"System Architecture Overview\", \"Technology Stack\", \"Data Model\", etc.\n*   **Important detail**: It explicitly tells the AI \"NO MERMAID DIAGRAMS - ONLY TEXT.\" This indicates that the AI should not try to generate visual diagrams but only text-based descriptions.\n\n#### **4.3. `buildPlanPrompt` Method**\n\n```php\n    /**\n     * Build development plan generation prompt\n     */\n    public function buildPlanPrompt(string $projectName, string $sddContent): string\n    {\n        $today = date('Y-m-d');\n\n        return \"Create a realistic development plan for '{$projectName}' based on this SDD:\n\n{$sddContent}\n\nStructure the plan with achievable phases, realistic timelines, and appropriate resource allocation based on project complexity and technology choices.\n\nInclude these sections:\n1. Project Overview\n2. Technology Stack\n3. Development Phases\n4. Timeline Estimates\n5. Resource Requirements\n6. Risk Assessment and Mitigation\n7. Testing Strategy\n8. Deployment Plan\n\nProvide specific details for each section with time estimates and dependencies.\nUse bullet points and clear descriptions.\nFormat in markdown with proper headers.\nToday's date: {$today}\";\n    }\n```\n\n*   This method creates a prompt for generating a \"Development Plan.\"\n*   It takes `$projectName` and `sddContent` (the System Design Document) as input.\n*   The prompt asks the AI to create a plan with phases, timelines, resource allocation, etc., based on the detailed SDD.\n\n#### **4.4. `buildPhasesPrompt` Method**\n\n```php\n    /**\n     * Build phase documents generation prompt\n     */\n    public function buildPhasesPrompt(string $planContent): string\n    {\n        $today = date('Y-m-d');\n\n        return \"Break down this development plan into phase documents with todo lists:\n\n{$planContent}\n\nFor each phase:\n## Phase X: [Phase Name]\n- [ ] Task 1: What needs to be accomplished\n- [ ] Task 2: Implementation details\n- [ ] Task 3: Testing requirements\n\nNumber phases sequentially.\nGive each phase a descriptive name.\nInclude specific, actionable tasks.\nFormat in markdown with proper headers.\nToday's date: {$today}\nNO MERMAID DIAGRAMS - ONLY TEXT.\";\n    }\n```\n\n*   This method generates a prompt to break down an existing development plan into individual phase documents, each with a to-do list.\n*   It takes `planContent` (the development plan generated earlier) as input.\n*   It provides a specific markdown format example for how each phase and its tasks should be structured.\n*   Again, it includes the instruction \"NO MERMAID DIAGRAMS - ONLY TEXT.\"\n\n#### **4.5. `buildDiagramPrompt` Method**\n\n```php\n    /**\n     * Build diagram generation prompt\n     */\n    public function buildDiagramPrompt(string $projectName, string $projectIdea): string\n    {\n        return \"Create a system architecture diagram for '{$projectName}' using Graphviz DOT language.\n\nBased on this project description:\n{$projectIdea}\n\nRequirements:\n- Use digraph format with proper graph attributes\n- Include main components, data flow, and relationships\n- Use appropriate node shapes (box, circle, cylinder for databases, etc.)\n- Add clear, descriptive labels for components\n- Number the relationships/edges sequentially (1, 2, 3...) to show the flow order\n- Make it readable and professional with good spacing\n- Focus on high-level architecture, not implementation details\n\nStyling requirements:\n- Set graph size to at least 8x6 inches for better readability\n- Use nodesep=1.0 and ranksep=1.5 for proper spacing between nodes\n- Add padding with pad=0.5\n- Ensure to increase font size based on diagram size and number of shapes to maintain readability, preferably large font size (e.g., 20-24pt)\n- Use 'Arial' for all text to ensure readability\n- Ensure black font color for all text\n- Make nodes colorful with purposeful colors:\n  * User interface components: light blue (fillcolor=\\\"#E3F2FD\\\", color=\\\"#1976D2\\\")\n  * Backend/API components: light green (fillcolor=\\\"#E8F5E8\\\", color=\\\"#388E3C\\\")\n  * Database components: light orange (fillcolor=\\\"#FFF3E0\\\", color=\\\"#F57C00\\\")\n  * External services: light purple (fillcolor=\\\"#F3E5F5\\\", color=\\\"#7B1FA2\\\")\n  * Infrastructure: light gray (fillcolor=\\\"#F5F5F5\\\", color=\\\"#616161\\\")\n- Include sequential numbers in edge labels (e.g., \\\"1. User Input\\\", \\\"2. Data Processing\\\")\n- Make edges colored based on data flow type (blue for user interactions, green for data flow, etc.)\n\nOutput only the complete DOT code starting with 'digraph', no explanations or markdown formatting.\";\n    }\n```\n\n*   This is the most detailed prompt. It's designed to ask an AI to create a system architecture diagram.\n*   It takes `$projectName` and `$projectIdea` as input.\n*   **Key difference**: Instead of asking for a text document, it specifically requests the output in \"Graphviz DOT language.\"\n    *   **Graphviz DOT language** is a plain text language for describing graphs (like diagrams). You can then use the Graphviz software to render this DOT code into an image (like a PNG or SVG).\n*   The prompt provides extremely specific requirements for the diagram, including:\n    *   Formatting (`digraph`).\n    *   Components to include (main components, data flow).\n    *   Node shapes (box, circle, cylinder).\n    *   Styling details: graph size, spacing (`nodesep`, `ranksep`), font size, font family, font color.\n    *   Specific color codes (hexadecimal values like `#E3F2FD`) for different types of components (UI, Backend, Database, etc.) to make the diagram visually distinct and professional.\n    *   Instructions for edge labels and colors.\n*   **Crucial instruction**: \"Output only the complete DOT code starting with 'digraph', no explanations or markdown formatting.\" This tells the AI to return *only* the raw DOT language code, nothing else, so it can be directly processed by Graphviz.\n\n---\n\n### **In Summary:**\n\nThe `PromptService` class acts as a utility to construct well-defined, instruction-rich text prompts. These prompts are designed to guide an AI (or a similar system) to generate specific types of project documentation (PRD, SDD, Development Plan, Phase Documents) or a system architecture diagram in a structured format like Graphviz DOT.\n\nThis service centralizes the logic for creating these prompts, making it easy to generate consistent and detailed instructions based on project name, idea, and previously generated content.","timestamp":"2025-09-23T14:12:29.133Z","config":{"mode":"explain","level":"beginner","provider":"gemini","model":"gemini-2.5-flash"}}
